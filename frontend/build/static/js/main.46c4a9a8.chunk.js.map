{"version":3,"sources":["globals.ts","ApiFetch.tsx","components/TaskListWidget/TaskListLogic.tsx","components/TaskListWidget/components/TaskListRow.tsx","components/TaskListWidget/components/TaskListNewRow.tsx","components/TaskListWidget/components/TaskListComponent.tsx","components/TaskListWidget/TaskListContainer.tsx","index.tsx","serviceWorker.tsx"],"names":["anyWindow","window","apiPost","input","data","apiFetch","method","body","JSON","stringify","init","headers","Headers","_","Content-type","Accept","fetch","then","response","ok","status","json","Promise","reject","message","exceptionName","statusCode","catch","error","location","replace","store","applicationStore","dispatch","Notifications","title","position","autoDismiss","taskListState","taskList","_callee2","request","regenerator_default","a","wrap","_context2","prev","next","sent","abrupt","stop","editTask","_x2","_editTask","apply","this","arguments","_callee3","_context3","findAllTasks2","_findAllTasks2","_callee5","_context5","TaskListRow","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handlerDescChange","e","setState","desc","handlerSubmitEditClick","id","text","handlerCancelEditClick","state","_this2","react","className","value","onChange","target","onClick","done","handlerDoneClick","React","TaskListNewRow","handlerSubmitCreationClick","handlerCancelCreationClick","TaskListComponent","showNewRow","hideNewRow","handleCancelCreation","handleSubmitCreation","TaskListNewRow_TaskListNewRow","map","index","TaskListRow_TaskListRow","key","connect","TaskListContainer","_x","_addTask","addTask","uuid","creationDateAndTime","creationTimestamp","handleSubmitEdition","oldTask","find","objectSpread","handleDone","task","length","alert","TaskListWidget_components_TaskListComponent","submitEdition","type","makeDone","__webpack_require__","d","__webpack_exports__","initialState","reducer","combineReducers","undefined","action","concat","toConsumableArray","createStore","composeWithDevTools","ReactDOM","es","TaskListWidget_TaskListContainer","document","getElementById","navigator","addEventListener","swUrl","process","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log"],"mappings":"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","file":"static/js/main.46c4a9a8.chunk.js","sourcesContent":["interface AnyWindow extends Window {\r\n    [extraProps: string]: any;\r\n  }\r\n  \r\n  export const anyWindow = window as AnyWindow;","import * as _ from 'lodash';\r\nimport { ErrorDto } from './ApiModels';\r\nimport { Store, Action } from 'redux';\r\nimport * as Notifications from 'react-notification-system-redux';\r\nimport { StateType } from './types';\r\nimport { anyWindow } from './globals';\r\n\r\nexport function apiPost(input: RequestInfo, data: {}) {\r\n    return apiFetch(input, {\r\n        method: 'POST',\r\n        body: JSON.stringify(data)\r\n    });\r\n}\r\n\r\nexport function apiFetch(input: RequestInfo, init?: RequestInit | undefined): Promise<Response> {\r\n    const defaultHeaders: _.Dictionary<string> = {\r\n        'Content-type': 'application/json; charset=UTF-8',\r\n        'Accept': 'application/json'\r\n    };\r\n\r\n    if (!init) {\r\n        init = {};\r\n    }\r\n\r\n    if (!init.headers) {\r\n        init.headers = new Headers();\r\n    }\r\n\r\n    init.headers = _.assign(defaultHeaders, init.headers);\r\n\r\n    return fetch(input, init)\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else if (response.status === 400) {\r\n                return response.json().then((json) => Promise.reject<Response>(json));\r\n            } else if (response.status === 404) {\r\n                return Promise.reject<Response>({\r\n                    message: 'Object not found',\r\n                    exceptionName: '',\r\n                    statusCode: 404\r\n                });\r\n            } else if (response.status === 403) {\r\n                return Promise.reject<Response>({\r\n                    message: 'Access is denied',\r\n                    exceptionName: '',\r\n                    statusCode: 403\r\n                });\r\n            } else if (response.status === 401) {\r\n                return Promise.reject<Response>({\r\n                    message: 'User is not authenticated',\r\n                    exceptionName: '',\r\n                    statusCode: 401\r\n                });\r\n            }\r\n\r\n            return Promise.reject<Response>({\r\n                message: 'Unknown network error',\r\n                exceptionName: '',\r\n                statusCode: response.status\r\n            });\r\n        })\r\n        .catch((error: ErrorDto) => {\r\n            if (error.statusCode === 401) {\r\n                window.location.replace('#/logout');\r\n            } else if (error.statusCode === 403) {\r\n                window.location.replace('#/');\r\n            } else {\r\n                const store: Store<StateType> = anyWindow.applicationStore;\r\n\r\n                if (store) {\r\n                    store.dispatch(createErrorNotification(error.message));\r\n                }\r\n            }\r\n\r\n            return Promise.reject<Response>(error);\r\n        });\r\n\r\n    function createErrorNotification(message: string): Action {\r\n        return Notifications.error({\r\n            title: 'An error occurred on the server',\r\n            message: message,\r\n            position: 'tr',\r\n            autoDismiss: 0\r\n        });\r\n    }\r\n\r\n}","import { Act } from '../../types';\r\nimport { TaskModel } from '../../ApiModels';\r\nimport { apiFetch, apiPost } from '../../ApiFetch';\r\n\r\nexport interface TaskListState {\r\n    taskList: TaskModel[];\r\n}\r\n\r\nexport const taskListState: TaskListState = {\r\n    taskList: []\r\n};\r\n\r\n/*export function submitCreation(value: string): TaskListActions {\r\n    return { type: 'TASK_LIST/SUBMIT_CREATION', value: { value } };\r\n}*/\r\n\r\nexport function submitEdition(value: TaskModel[]): TaskListActions {\r\n    return { type: 'TASK_LIST/SUBMIT_EDITION', value: { value } };\r\n}\r\n\r\nexport function makeDone(value: TaskModel[]): TaskListActions {\r\n    return { type: 'TASK_LIST/MAKE_DONE', value: { value } };\r\n}\r\n\r\nexport type TaskListActions = Act<'TASK_LIST/SUBMIT_CREATION', { value: TaskModel }> |\r\n    Act<'TASK_LIST/MAKE_DONE', { value: TaskModel[] }> | Act<'TASK_LIST/SUBMIT_EDITION', { value: TaskModel[] }>;\r\n\r\nexport function taskListReducer(\r\n    state: TaskListState = taskListState,\r\n    action: TaskListActions): TaskListState {\r\n    switch (action.type) {\r\n        case 'TASK_LIST/SUBMIT_CREATION': return {\r\n            ...state,\r\n            taskList: state.taskList.concat(action.value.value)\r\n        };\r\n        case 'TASK_LIST/MAKE_DONE': return {\r\n            ...state,\r\n            taskList: [...action.value.value]\r\n        };\r\n        case 'TASK_LIST/SUBMIT_EDITION': return {\r\n            ...state,\r\n            taskList: [...action.value.value]\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport async function findAllTasks(): Promise<string> {\r\n    const response = await apiFetch('/findAllTasks');\r\n    return await response.json();\r\n}\r\n\r\nexport async function addTask(request: TaskModel): Promise<String> {\r\n    const response = await apiPost('/addTask', request);\r\n    return await response.json();\r\n}\r\n\r\nexport async function editTask(request: TaskModel): Promise<string> {\r\n    const response = await apiPost('/editTask', request);\r\n    return await response.json();\r\n}\r\n\r\nexport async function deleteTask(taskId: string): Promise<string> {\r\n    const response = await apiPost('/deleteTask', taskId);\r\n    return await response.json();\r\n}\r\n\r\nexport async function findAllTasks2(): Promise<string> {\r\n    const response = await apiFetch('/api/rest');\r\n    return await response.json();\r\n}","import * as React from 'react';\r\nimport './TaskListComponent.css';\r\n\r\ninterface OwnProps {\r\n    key: number;\r\n    desc: string;\r\n    done: boolean;\r\n    id: string;\r\n    handlerSubmitEditClick(id: string, desc: string): void;\r\n    handlerDoneClick(id: string): void;\r\n}\r\n\r\ninterface State {\r\n    desc: string;\r\n    editTask: boolean;\r\n}\r\n\r\ntype Props = OwnProps;\r\n\r\nexport default class TaskListRow extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            desc: this.props.desc,\r\n            editTask: false\r\n        }\r\n    }\r\n\r\n    handlerDescChange = (e: string) => {\r\n        this.setState({ desc: e })\r\n    }\r\n\r\n    handlerSubmitEditClick = (id: string, text: string) => {\r\n        this.setState({ editTask: false });\r\n        this.props.handlerSubmitEditClick(id, text);\r\n    }\r\n\r\n    handlerCancelEditClick = () => {\r\n        this.setState({ editTask: false });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'row'}>\r\n                {this.state.editTask\r\n                    ? <div className={'edit-row'}>\r\n                        <input\r\n                            value={this.state.desc}\r\n                            onChange={(e) => this.handlerDescChange(e.target.value)}\r\n                        />\r\n                        <button\r\n                            onClick={() => this.handlerSubmitEditClick(this.props.id, this.state.desc)}\r\n                        >\r\n                            Submit\r\n                    </button>\r\n                        <button\r\n                            onClick={this.handlerCancelEditClick}\r\n                        >\r\n                            Cancel\r\n                    </button>\r\n                    </div>\r\n                    : <div>\r\n                        <span>{this.props.desc}</span>\r\n                        {this.props.done && <span> - OK </span>}\r\n                        {!this.props.done &&\r\n                            <span>\r\n                                <button\r\n                                    onClick={() => this.setState({ editTask: true, desc: this.props.desc })}>\r\n                                    Edit\r\n                    </button>\r\n                                <button\r\n                                    onClick={() => this.props.handlerDoneClick(this.props.id)}\r\n                                >\r\n                                    Done\r\n                    </button>\r\n                            </span>}\r\n                    </div>}\r\n            </div>\r\n        );\r\n    }\r\n}","import * as React from 'react';\r\n\r\ninterface State {\r\n    desc: string;\r\n}\r\n\r\ninterface OwnProps {\r\n    handlerSubmitCreationClick(value: string): void;\r\n    handlerCancelCreationClick(): void;\r\n}\r\n\r\ntype Props = OwnProps;\r\n\r\nexport default class TaskListNewRow extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            desc: ''\r\n        };\r\n    }\r\n\r\n    handlerDescChange = (e: string) => {\r\n        this.setState({ desc: e })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'edit-row'}>\r\n                <input\r\n                    value={this.state.desc}\r\n                    onChange={(e) => this.handlerDescChange(e.target.value)}\r\n                />\r\n                <button\r\n                    onClick={() => this.props.handlerSubmitCreationClick(this.state.desc)}\r\n                >\r\n                    Create\r\n            </button>\r\n                <button\r\n                    onClick={this.props.handlerCancelCreationClick}\r\n                >\r\n                    Cancel\r\n            </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport TaskListRow from './TaskListRow';\r\nimport TaskListNewRow from './TaskListNewRow';\r\nimport { StateType } from '../../../types';\r\nimport { connect } from 'react-redux';\r\nimport { TaskModel } from '../../../ApiModels';\r\nimport './TaskListComponent.css';\r\n\r\ninterface OwnProps {\r\n    handlerSubmitEditClick(id: string, desc: string): void;\r\n    handlerDoneClick(id: string): void;\r\n    handlerSubmitCreationClick(value: string): void;\r\n}\r\n\r\ninterface State {\r\n    showNewRow: boolean;\r\n}\r\n\r\ninterface StateToProps {\r\n    taskList: TaskModel[];\r\n}\r\n\r\ntype Props = OwnProps & StateToProps;\r\n\r\nclass TaskListComponent extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showNewRow: false\r\n        }\r\n    }\r\n\r\n    showNewRow = () => {\r\n        this.setState({ showNewRow: true });\r\n    }\r\n\r\n    hideNewRow = () => {\r\n        this.setState({ showNewRow: false });\r\n    }\r\n\r\n    handleCancelCreation = () => {\r\n        this.hideNewRow();\r\n    }\r\n\r\n    handleSubmitCreation = (value: string) => {\r\n        this.hideNewRow();\r\n        this.props.handlerSubmitCreationClick(value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={'task-list'}>\r\n                <button\r\n                    className={'btn add-new-task'}\r\n                    onClick={this.showNewRow}\r\n                >\r\n                    <span className={'glyphicon glyphicon-plus'}></span>\r\n                    Add new task\r\n                </button>\r\n                <div className={'task-list list'}>\r\n                    {this.state.showNewRow &&\r\n                        <TaskListNewRow\r\n                            handlerSubmitCreationClick={this.handleSubmitCreation}\r\n                            handlerCancelCreationClick={this.handleCancelCreation}\r\n                        />\r\n                    }\r\n                    <span className={'task-list list element'}>\r\n                        {\r\n                            this.props.taskList.map((e, index) => {\r\n                                return (\r\n                                    <TaskListRow\r\n                                        key={index}\r\n                                        desc={e.desc}\r\n                                        done={e.done}\r\n                                        id={e.id}\r\n                                        handlerSubmitEditClick={this.props.handlerSubmitEditClick}\r\n                                        handlerDoneClick={this.props.handlerDoneClick}\r\n                                    />\r\n                                );\r\n                            })\r\n                        }\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: StateType) {\r\n    return {\r\n        taskList: state.taskList.taskList\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(TaskListComponent);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport TaskListComponent from './components/TaskListComponent';\r\nimport { StateType } from '../../types';\r\nimport { Dispatch } from 'redux';\r\nimport { TaskModel } from '../../ApiModels';\r\nimport {\r\n    TaskListActions,\r\n    //submitCreation,\r\n    submitEdition,\r\n    makeDone,\r\n    addTask,\r\n    editTask,\r\n    findAllTasks2\r\n} from './TaskListLogic';\r\nimport uuid from 'uuid';\r\n\r\ninterface StateToProps {\r\n    taskList: TaskModel[];\r\n}\r\n\r\ninterface DispatchProps {\r\n    //submitCreation(value: string): void;\r\n    submitEdition(value: TaskModel[]): void;\r\n    makeDone(value: TaskModel[]): void;\r\n}\r\n\r\ninterface State {\r\n    task: number;\r\n}\r\n\r\ntype Props = StateToProps & DispatchProps;\r\n\r\nclass TaskListContainer extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            task: findAllTasks2.length\r\n        }\r\n    }\r\n\r\n    handleSubmitCreation = (text: string) => {\r\n        //this.props.submitCreation(text);\r\n        const task: TaskModel = {\r\n            id: uuid(),\r\n            done: false,\r\n            creationDateAndTime: '',\r\n            creationTimestamp: '',\r\n            desc: text\r\n        }\r\n        addTask(task);\r\n    }\r\n\r\n    handleSubmitEdition = (id: string, text: string) => {\r\n        const oldTask = this.props.taskList.find(e => e.id === id);\r\n\r\n        if (!oldTask) {\r\n            return;\r\n        }\r\n\r\n        const newTask: TaskModel = {\r\n            ...oldTask,\r\n            desc: text\r\n        }\r\n        editTask(newTask);\r\n\r\n        /*const taskListEdited = [...this.props.taskList];\r\n        taskListEdited[index].desc = text;\r\n        this.props.submitEdition(taskListEdited);*/\r\n    }\r\n\r\n    handleDone = (id: string) => {\r\n        const oldTask = this.props.taskList.find(e => e.id === id);\r\n\r\n        if (!oldTask) {\r\n            return;\r\n        }\r\n\r\n        const newTask: TaskModel = {\r\n            ...oldTask,\r\n            done: true\r\n        }\r\n        editTask(newTask);\r\n\r\n        /*const taskListEdited = [...this.props.taskList];\r\n        taskListEdited[index].done = true\r\n        this.props.makeDone(taskListEdited);*/\r\n    }\r\n\r\n    render() {\r\n        alert(this.state.task);\r\n\r\n        return (\r\n            <div className={'task-list-component'}>\r\n                <TaskListComponent\r\n                    handlerSubmitCreationClick={this.handleSubmitCreation}\r\n                    handlerSubmitEditClick={this.handleSubmitEdition}\r\n                    handlerDoneClick={this.handleDone}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: StateType) {\r\n    return {\r\n        taskList: state.taskList.taskList\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: Dispatch<TaskListActions>): DispatchProps {\r\n    return {\r\n        //submitCreation: (value: string) => dispatch(submitCreation(value)),\r\n        submitEdition: (value: TaskModel[]) => dispatch(submitEdition(value)),\r\n        makeDone: (value: TaskModel[]) => dispatch(makeDone(value))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskListContainer);","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { combineReducers, createStore } from 'redux';\nimport { StateType } from './types';\nimport { taskListReducer, taskListState } from './components/TaskListWidget/TaskListLogic';\nimport register from './serviceWorker';\nimport TaskListContainer from './components/TaskListWidget/TaskListContainer';\nimport { Provider } from 'react-redux'\n\nconst reducer = combineReducers<StateType>({\n    taskList: taskListReducer\n});\n\nexport const initialState: StateType = {\n    taskList: taskListState\n}\n\nconst store = createStore(\n    reducer,\n    composeWithDevTools()\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <TaskListContainer />\n    </Provider>\n    , document.getElementById('root'));\n\nregister();\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (!installingWorker) {\n              return;\n            }\n\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  console.log('New content is available; please refresh.');\n                } else {\n                  console.log('Content is cached for offline use.')\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}
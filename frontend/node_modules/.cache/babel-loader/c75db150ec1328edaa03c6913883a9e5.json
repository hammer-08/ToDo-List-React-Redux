{"ast":null,"code":"import * as _ from 'lodash';\nimport * as Notifications from 'react-notification-system-redux';\nimport { anyWindow } from './globals';\nexport function apiPost(input, data) {\n  return apiFetch(input, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\nexport function apiFetch(input, init) {\n  const defaultHeaders = {\n    'Content-type': 'application/json; charset=UTF-8',\n    'Accept': 'application/json'\n  };\n\n  if (!init) {\n    init = {};\n  }\n\n  if (!init.headers) {\n    init.headers = new Headers();\n  }\n\n  init.headers = _.assign(defaultHeaders, init.headers);\n  return fetch(input, init).then(response => {\n    if (response.ok) {\n      return response;\n    } else if (response.status === 400) {\n      return response.json().then(json => Promise.reject(json));\n    } else if (response.status === 404) {\n      return Promise.reject({\n        message: 'Object not found',\n        exceptionName: '',\n        statusCode: 404\n      });\n    } else if (response.status === 403) {\n      return Promise.reject({\n        message: 'Access is denied',\n        exceptionName: '',\n        statusCode: 403\n      });\n    } else if (response.status === 401) {\n      return Promise.reject({\n        message: 'User is not authenticated',\n        exceptionName: '',\n        statusCode: 401\n      });\n    }\n\n    return Promise.reject({\n      message: 'Unknown network error',\n      exceptionName: '',\n      statusCode: response.status\n    });\n  }).catch(error => {\n    if (error.statusCode === 401) {\n      window.location.replace('#/logout');\n    } else if (error.statusCode === 403) {\n      window.location.replace('#/');\n    } else {\n      const store = anyWindow.applicationStore;\n\n      if (store) {\n        store.dispatch(createErrorNotification(error.message));\n      }\n    }\n\n    return Promise.reject(error);\n  });\n\n  function createErrorNotification(message) {\n    return Notifications.error({\n      title: 'An error occurred on the server',\n      message: message,\n      position: 'tr',\n      autoDismiss: 0\n    });\n  }\n}","map":{"version":3,"sources":["C:\\Users\\MiniTower\\Documents\\Workspace\\TODOList+Score\\frontend\\src\\ApiFetch.tsx"],"names":["_","Notifications","anyWindow","apiPost","input","data","apiFetch","method","body","JSON","stringify","init","defaultHeaders","headers","Headers","assign","fetch","then","response","ok","status","json","Promise","reject","message","exceptionName","statusCode","catch","error","window","location","replace","store","applicationStore","dispatch","createErrorNotification","title","position","autoDismiss"],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\r\nimport { ErrorDto } from './ApiModels';\r\nimport { Store, Action } from 'redux';\r\nimport * as Notifications from 'react-notification-system-redux';\r\nimport { StateType } from './types';\r\nimport { anyWindow } from './globals';\r\n\r\nexport function apiPost(input: RequestInfo, data: {}) {\r\n    return apiFetch(input, {\r\n        method: 'POST',\r\n        body: JSON.stringify(data)\r\n    });\r\n}\r\n\r\nexport function apiFetch(input: RequestInfo, init?: RequestInit | undefined): Promise<Response> {\r\n    const defaultHeaders: _.Dictionary<string> = {\r\n        'Content-type': 'application/json; charset=UTF-8',\r\n        'Accept': 'application/json'\r\n    };\r\n\r\n    if (!init) {\r\n        init = {};\r\n    }\r\n\r\n    if (!init.headers) {\r\n        init.headers = new Headers();\r\n    }\r\n\r\n    init.headers = _.assign(defaultHeaders, init.headers);\r\n\r\n    return fetch(input, init)\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            } else if (response.status === 400) {\r\n                return response.json().then((json) => Promise.reject<Response>(json));\r\n            } else if (response.status === 404) {\r\n                return Promise.reject<Response>({\r\n                    message: 'Object not found',\r\n                    exceptionName: '',\r\n                    statusCode: 404\r\n                });\r\n            } else if (response.status === 403) {\r\n                return Promise.reject<Response>({\r\n                    message: 'Access is denied',\r\n                    exceptionName: '',\r\n                    statusCode: 403\r\n                });\r\n            } else if (response.status === 401) {\r\n                return Promise.reject<Response>({\r\n                    message: 'User is not authenticated',\r\n                    exceptionName: '',\r\n                    statusCode: 401\r\n                });\r\n            }\r\n\r\n            return Promise.reject<Response>({\r\n                message: 'Unknown network error',\r\n                exceptionName: '',\r\n                statusCode: response.status\r\n            });\r\n        })\r\n        .catch((error: ErrorDto) => {\r\n            if (error.statusCode === 401) {\r\n                window.location.replace('#/logout');\r\n            } else if (error.statusCode === 403) {\r\n                window.location.replace('#/');\r\n            } else {\r\n                const store: Store<StateType> = anyWindow.applicationStore;\r\n\r\n                if (store) {\r\n                    store.dispatch(createErrorNotification(error.message));\r\n                }\r\n            }\r\n\r\n            return Promise.reject<Response>(error);\r\n        });\r\n\r\n    function createErrorNotification(message: string): Action {\r\n        return Notifications.error({\r\n            title: 'An error occurred on the server',\r\n            message: message,\r\n            position: 'tr',\r\n            autoDismiss: 0\r\n        });\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}
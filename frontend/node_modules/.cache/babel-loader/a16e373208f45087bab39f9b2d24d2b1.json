{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n      navigator.serviceWorker.register(swUrl).then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n\n          if (!installingWorker) {\n            return;\n          }\n\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                console.log('New content is available; please refresh.');\n              } else {\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      }).catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n    });\n  }\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["C:\\Users\\MiniTower\\Documents\\Workspace\\TODOList+Score\\frontend\\src\\serviceWorker.tsx"],"names":["register","process","env","NODE_ENV","navigator","window","addEventListener","swUrl","PUBLIC_URL","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","unregister","ready"],"mappings":"AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,eAAe,SAASA,QAAT,GAAoB;AACjC,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,mBAAmBC,SAAhE,EAA2E;AACzEC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,MAAM;AACpC,YAAMC,KAAK,aAAMN,OAAO,CAACC,GAAR,CAAYM,UAAlB,uBAAX;AACAJ,MAAAA,SAAS,CAACK,aAAV,CACGT,QADH,CACYO,KADZ,EAEGG,IAFH,CAEQC,YAAY,IAAI;AACpBA,QAAAA,YAAY,CAACC,aAAb,GAA6B,MAAM;AACjC,gBAAMC,gBAAgB,GAAGF,YAAY,CAACG,UAAtC;;AACA,cAAI,CAACD,gBAAL,EAAuB;AACrB;AACD;;AAEDA,UAAAA,gBAAgB,CAACE,aAAjB,GAAiC,MAAM;AACrC,gBAAIF,gBAAgB,CAACG,KAAjB,KAA2B,WAA/B,EAA4C;AAC1C,kBAAIZ,SAAS,CAACK,aAAV,CAAwBQ,UAA5B,EAAwC;AACtCC,gBAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACD,eAFD,MAEO;AACLD,gBAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACD;AACF;AACF,WARD;AASD,SAfD;AAgBD,OAnBH,EAoBGC,KApBH,CAoBSC,KAAK,IAAI;AACdH,QAAAA,OAAO,CAACG,KAAR,CAAc,2CAAd,EAA2DA,KAA3D;AACD,OAtBH;AAuBD,KAzBD;AA0BD;AACF;AAED,OAAO,SAASC,UAAT,GAAsB;AAC3B,MAAI,mBAAmBlB,SAAvB,EAAkC;AAChCA,IAAAA,SAAS,CAACK,aAAV,CAAwBc,KAAxB,CAA8Bb,IAA9B,CAAmCC,YAAY,IAAI;AACjDA,MAAAA,YAAY,CAACW,UAAb;AACD,KAFD;AAGD;AACF","sourcesContent":["import { number } from \"prop-types\";\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (!installingWorker) {\n              return;\n            }\n\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  console.log('New content is available; please refresh.');\n                } else {\n                  console.log('Content is cached for offline use.')\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}